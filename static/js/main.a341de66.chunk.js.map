{"version":3,"sources":["context/weatherContext.js","screen/HomeScreen.js","showData.js","screen/AutoGeoScreen.js","screen/ManualGeoScreen.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherContext","createContext","Provider","WeatherProvider","children","useState","weather","setWeather","loading","setLoading","contextValue","getManualWeather","city_name_input","city_name","cityName","url","axios","get","then","res","data","value","HomeScreen","useContext","className","src","to","onClick","ShowData","console","log","name","sys","country","icon","alt","main","temp","feels_like","temp_min","temp_max","humidity","AutoGeoScreen","props","status","setStatus","coords","position","lat","latitude","lon","longitude","statusText","useEffect","navigator","geolocation","getCurrentPosition","Button","variant","disabled","Spinner","as","animation","size","role","ManualGeoScreen","ErrorSchema","Yup","shape","required","min","max","initialValues","onSubmit","values","validationSchema","type","errors","isValid","AppRoutes","path","exact","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a341de66.chunk.js","sourcesContent":["import {createContext, useState} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const WeatherContext = createContext()\r\nconst {Provider} = WeatherContext\r\n\r\nexport const WeatherProvider = ({children}) => {\r\n\r\n    const [weather, setWeather] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const API_KEY = \"e8a1ffc4742780c265efd9993a509053\"\r\n\r\n    function getManualWeather(city_name_input) {\r\n        setLoading(true)\r\n\r\n        const {cityName: city_name} = city_name_input\r\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city_name}&appid=${API_KEY}&lang=es&units=metric`\r\n\r\n        axios.get(url).then(res => {\r\n            setWeather(res.data)\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n    const contextValue = {\r\n        getManualWeather,\r\n        weather,\r\n        setWeather,\r\n        loading\r\n    }\r\n\r\n    return (\r\n        <Provider value={contextValue}>\r\n            {children}\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default WeatherContext","import React, {useContext} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport WeatherContext from \"../context/weatherContext\";\r\n\r\n\r\nfunction HomeScreen() {\r\n\r\n    const {setWeather} = useContext(WeatherContext);\r\n\r\n    return (\r\n        <div className={'container d-flex flex-column align-items-center'}>\r\n                <h1>Weather App</h1>\r\n                <img src={'https://i.pinimg.com/originals/0e/f3/bb/0ef3bb66d9216fffcea9022628f7bb26.gif'}\r\n                     className=\"rounded-circle gif my-3\"/>\r\n\r\n\r\n            <Link to={'/weather-app-React/auto-zone'} className={'btn btn-danger w-50 my-4'}>\r\n                Auto-Detection Zone\r\n            </Link>\r\n            <Link to={'/weather-app-React/manual-zone'} className={'btn btn-info w-50'} onClick={setWeather(null)}>\r\n                Manual-Detection Zone\r\n            </Link>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default HomeScreen;","import React, {useContext} from 'react';\r\nimport WeatherContext from \"./context/weatherContext\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction ShowData() {\r\n\r\n    const {weather} = useContext(WeatherContext);\r\n    console.log(weather)\r\n\r\n    if (weather === null){\r\n       return null\r\n    }else {\r\n        return (\r\n            <>\r\n                <div>\r\n                    <div className={'d-flex align-items-center'}>\r\n                        <h1>{weather.name} - {weather.sys.country}</h1>\r\n                        <img src={`https://openweathermap.org/img/w/${weather.weather[0].icon}.png`} alt={\"icon_weather\"}/>\r\n                    </div>\r\n                    <h1>Temperatura: {weather.main.temp}°</h1>\r\n                    <h1>Sensación térmica: {weather.main.feels_like}°</h1>\r\n                    <h1>Temp. Min: {weather.main.temp_min}°</h1>\r\n                    <h1>Temp. Max: {weather.main.temp_max}°</h1>\r\n                    <h1>Humedad: {weather.main.humidity}%</h1>\r\n                </div>\r\n                <Link to={'/weather-app-React/'} className={'btn btn-warning'}>\r\n                    Menu\r\n                </Link>\r\n            </>\r\n\r\n\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ShowData;","import React, {useContext, useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport ShowData from \"../showData\";\r\nimport {Button, Spinner} from \"react-bootstrap\";\r\nimport WeatherContext from \"../context/weatherContext\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction AutoGeoScreen(props) {\r\n    const [status, setStatus] = useState(\"\");\r\n\r\n    const {setWeather} = useContext(WeatherContext);\r\n\r\n    const API_KEY = \"e8a1ffc4742780c265efd9993a509053\"\r\n\r\n    function coords(position) {\r\n\r\n        const {latitude: lat, longitude: lon} = position.coords\r\n\r\n        const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&lang=es&units=metric`\r\n\r\n        axios.get(url).then(res => {\r\n            console.log(res)\r\n            setWeather(res.data)\r\n            setStatus(res.statusText)\r\n        })\r\n    }\r\n\r\n    function getWeather() {\r\n        navigator.geolocation.getCurrentPosition(coords)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getWeather()\r\n    }, []);\r\n\r\n\r\n    if (status === \"OK\") {\r\n        return (\r\n            <>\r\n                <ShowData/>\r\n\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <Button variant=\"primary\" disabled className={'d-block m-auto mt-5'}>\r\n                    <Spinner\r\n                        as=\"span\"\r\n                        animation=\"grow\"\r\n                        size=\"sm\"\r\n                        role=\"status\"\r\n                        aria-hidden=\"true\"\r\n                    />\r\n                    Loading...\r\n                </Button>\r\n\r\n            </>\r\n\r\n\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default AutoGeoScreen;","import React, {useContext} from 'react';\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport WeatherContext from \"../context/weatherContext\";\r\nimport {Spinner} from \"react-bootstrap\";\r\nimport ShowData from \"../showData\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction ManualGeoScreen() {\r\n\r\n    const {getManualWeather, loading} = useContext(WeatherContext);\r\n\r\n    const ErrorSchema = Yup.object().shape({\r\n        cityName: Yup.string().required(\"Enter a valid city.\").min(3, \"City name is too short\").max(20, \"City name is too long\"),\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Link to={\"/weather-app-React/\"}  className={'btn btn-success m-2'}>\r\n                Back\r\n            </Link>\r\n            <Formik initialValues={{\r\n                cityName: \"\",\r\n            }} onSubmit={(values => {\r\n                getManualWeather(values);\r\n            })} validationSchema={ErrorSchema}\r\n            >\r\n                {\r\n                    (props) => {\r\n                        return (\r\n                            <Form className={'m-auto w-50 center-form'}>\r\n                                <div className={'d-flex flex-column m-3 align-items-center'}>\r\n                                    <h3 className={'text-center mt-5 fs-1'}>Enter city name:</h3>\r\n                                    <Field name={'cityName'} type={'text'} className={'w-100 form-control'}/>\r\n                                    <small className={'error'}>{props.errors.cityName}</small>\r\n                                    <button className={'btn btn-outline-success w-50 my-3'} type={'submit'} disabled={!props.isValid}> Send\r\n                                    </button>\r\n                                </div>\r\n\r\n                            </Form>\r\n                        )\r\n                    }\r\n                }\r\n            </Formik>\r\n\r\n                {loading ? <Spinner animation=\"border\" variant=\"danger\" />  : <ShowData />}\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ManualGeoScreen;","import React from 'react';\r\nimport {\r\n    BrowserRouter,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport HomeScreen from \"../screen/HomeScreen\";\r\nimport AutoGeoScreen from \"../screen/AutoGeoScreen\";\r\nimport ManualGeoScreen from \"../screen/ManualGeoScreen\";\r\n\r\nfunction AppRoutes() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path={'/weather-app-React/'} exact component={HomeScreen}/>\r\n                <Route path={'/weather-app-React/auto-zone'} exact component={AutoGeoScreen}/>\r\n                <Route path={'/weather-app-React/manual-zone'} exact component={ManualGeoScreen}/>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default AppRoutes;","import AppRoutes from \"./routes/AppRoutes\";\nimport {WeatherProvider} from \"./context/weatherContext\"\nimport \"./App.css\"\n\nfunction App() {\n    return(\n        <WeatherProvider>\n            <AppRoutes/>\n        </WeatherProvider>\n        )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}